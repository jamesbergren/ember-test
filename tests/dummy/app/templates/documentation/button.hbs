<h1>\{{eui-button}}</h1>

<div class="intro">
  A reimplementation of the browser button tag that adds a loading state and support for icons.
</div>

<h2>Parameters</h2>

<ul class="parameterindex">
  <li class="header">Aesthetic</li>
  <li><a href="#section-class">class</a></li>
  <li><a href="#section-label">label</a></li>
  <li><a href="#section-size">size</a></li>
  <li><a href="#section-style">style</a></li>
  <li><a href="#section-leadingicon">leadingIcon</a></li>
  <li><a href="#section-trailingicon">trailingIcon</a></li>
  <li><a href="#section-width">width</a></li>

  <li class="header">States</li>
  <li><a href="#section-disabled">disabled</a></li>
  <li><a href="#section-loading">loading</a></li>

  <li class="header">Attributes</li>
  <li><a href="#section-type">type</a></li>

  <li class="header">Actions</li>
  <li><a href="#section-action">action</a></li>
</ul>


<h4 id="section-class">class <span>string</span></h4>
<p>
  Assigns a custom CSS class to the button.
</p>


<h4 id="section-label">label <span>string</span></h4>
<p>
  The text displayed on the button.
</p>

<pre>\{{eui-button label='Save Changes'}}</pre>

<div class="output">
  {{eui-button label='Save Changes'}}
</div>


<h4 id="section-size">size <span>string</span></h4>
<p>
  The size of the button.
</p>

<h5>Values</h5>
<ul class="defaults">
  <li>tiny</li>
  <li>small</li>
  <li>medium (default)</li>
  <li>large</li>
</ul>
<p>
  Additional sizes can be added via CSS. See {{link-to "Theming" "documentation.theming"}}
</p>

<pre>\{{eui-button label='Save Changes' size='tiny'}}
\{{eui-button label='Save Changes' size='small'}}
\{{eui-button label='Save Changes' size='medium'}}
\{{eui-button label='Save Changes' size='large'}}</pre>

<div class="output">
  {{eui-button label='Save Changes' size='tiny'}}
  {{eui-button label='Save Changes' size='small'}}
  {{eui-button label='Save Changes' size='medium'}}
  {{eui-button label='Save Changes' size='large'}}
</div>


<h4 id="section-style">style <span>string</span></h4>
<p>
  The aesthetic style of the button.
</p>

<h5>Values</h5>
<ul class="defaults">
  <li>default (default)</li>
  <li>primary</li>
</ul>
<p>
  Additional styles can be added via CSS. See {{link-to "Theming" "documentation.theming"}}
</p>

<pre>\{{eui-button label='Save Changes' style='default'}}
\{{eui-button label='Save Changes' style='primary'}}</pre>

<div class="output">
  {{eui-button label='Save Changes' style='default'}}
  {{eui-button label='Save Changes' style='primary'}}
</div>


<h4 id="section-leadingicon">leadingIcon <span>string</span></h4>
<p>
  Displays an icon in front of the label. If no label is set, the button will show up square with the icon centered.
</p>
<p>
  Pass in a class that will get assgined to a <em>&lt;b&gt;</em> tag inside the button label. You can customize the icon with the css <em>:before</em> selector or set a background image on the tag if icon fonts are not used.
</p>

<pre>\{{eui-button label='Settings' leadingIcon='fa fa-cog'}}
\{{eui-button leadingIcon='fa fa-cog'}}</pre>

<div class="output">
  {{eui-button label='Settings' leadingIcon='fa fa-cog'}}
  {{eui-button leadingIcon='fa fa-cog'}}
</div>

<p>
  The example uses <a href="http://fontawesome.io/">FontAwesome</a> for its icons.
</p>


<h4 id="section-trailingicon">trailingIcon <span>string</span></h4>
<p>
  Displays an icon after the label. Requires a label to be set to display correctly.
</p>

<pre>\{{eui-button label='Next' trailingIcon='fa fa-angle-double-right'}}</pre>

<div class="output">
  {{eui-button label='Next' trailingIcon='fa fa-angle-double-right'}}
</div>


<h4 id="section-width">width <span>string</span></h4>
<p>
  Width of the button. You must pass in a CSS size value with the unit. The select uses CSS box-sizing to ensure precentage-based sizes are actual sizes.
</p>


<h4 id="section-disabled">disabled <span>boolean</span></h4>
<p>
  Disables the button and prevents the action from firing if clicked.
</p>

<pre>\{{eui-button label='Save Changes' disabled=true}}
\{{eui-button label='Click to Disable' disabled=isDisabled action='switchToDisabled'}}</pre>

<pre>actions: {
  switchToDisabled: function(controller) {
    this.get("controller").set('isDisabled', true);
  }
}</pre>

<div class="output">
  {{eui-button label='Save Changes' disabled=true}}
  {{eui-button label='Click to Disable' disabled=isDisabled action='switchToDisabled'}}
</div>


<h4 id="section-loading">loading <span>boolean</span></h4>
<p>
  If <em>loading</em> is set to true the <em>disabled</em> state is automatically activated as well and the loading state is entered. Upon entering the loading state the button label is faded out and the animation is faded in.
</p>
<p>
  The button maintains its size during the loading phase. If the button is too small to show all three dots of the loading animation the amount of dots will be reduced until it fits.
</p>

<pre>\{{eui-button label='Save Changes' loading=true}}
\{{eui-button label='Click to Load' loading=isLoading action='switchToLoading'}}</pre>

<pre>actions: {
  switchToLoading: function(controller) {
    this.get("controller").set('isLoading', true);
  }
}</pre>

<div class="output">
  {{eui-button label='Save Changes' loading=true}}
  {{eui-button label='Click to Load' loading=isLoading action='switchToLoading'}}
</div>


<h4 id="section-type">type <span>string</span></h4>
<p>
  Type of button. Set to submit if you want the button to submit a form on enter.
</p>

<h5>Values</h5>
<ul class="defaults">
  <li>button (default)</li>
  <li>submit</li>
</ul>


<h4 id="section-action">action <span>string</span></h4>
<p>
  The action you want to trigger when the user clicks the button.
</p>

<pre>\{{eui-button label='Show Alert' action='showAlert'}}</pre>

<pre>actions: {
  showAlert: function() {
    alert("Showing Alert");
  }
}</pre>

<div class="output">
  {{eui-button label='Show Alert' action='showAlert'}}
</div>

<p>
  The context of the button gets passed through with the click and allows you to pass through information that the action can act on.
</p>

<pre>\{{eui-button label='Show Alert' action='deleteItem' itemToDelete=item}}</pre>

<pre>actions: {
  deleteItem: function(context) {
    this.controller.get('items').removeObject(context.itemToDelete);
  }
}</pre>
