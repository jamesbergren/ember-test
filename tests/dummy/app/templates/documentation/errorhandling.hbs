<h1>Error Handling</h1>

<div class="intro">
  Greatly speed up form validation and general error handling while also improving the usability of your applications.
</div>

<h2>Logic</h2>

<p>
  When the page loads inputs are in a normal state. For the form element to get highlighted in red or an error message to show up the element needs to enter an errror state. Entering and leaving the error state happens based on a set of conditions.
</p>

<ul>
  <li>
    <strong>Page load</strong>
    <ul>
      <li>Element has a value: calculate and update error state</li>
      <li>Element has no value: don't do anything</li>
    </ul>
  </li>
  <li>
    <strong>Element value change</strong>
    <ul>
      <li>Element currently not in an error state: don't do anything</li>
      <li>Element currently in an error state: calculate and update error state on change</li>
    </ul>
  </li>
  <li>
    <strong>Element loses focus</strong>
    <ul>
      <li>Calculate and update error state</li>
    </ul>
  </li>
  <li>
    <strong>Validation is forced with forceErrorCheck property</strong>
    <ul>
      <li>Calculate and update error state</li>
    </ul>
  </li>
</ul>

<p>
  We do not calculate or enter an error state for inputs that are blank on page load because the user has had no chance to interact with them yet.
</p>
<p>
  This also applies when the user is entering data into an elment not currently in an error state. We don't trigger an error as soon as the user starts typing but give them a chance to finish first. Thus the first error check happens when the element loses focus.
</p>


<h2>error</h2>

<p>
  To enter the error state simply return true for the <em>error</em> property. Remember, if the element has no value then <em>error</em> will not be evaluated on page load.
</p>

<pre>\{{eui-input value='' error=true placeholder="Will error on focus out"}}
\{{eui-input value='john@example' error=true}}</pre>

<div class="output">
  {{eui-input value='' error=true placeholder="Will error on focus out"}}
  {{eui-input value='john@example' error=true}}
</div>

<p>
  You can also return a string instead of a boolean value in order to show an error message.
</p>

<pre>\{{eui-input value='dog' error="Please enter a valid location"}}</pre>

<div class="output">
  {{eui-input value='dog' error="Please enter a valid location"}}
</div>

<p>
  Both of these examples used a fixed value for <em>error</em> so the error state cannot change. If we instead make use of Ember's data bindings we can create an input that updates its error state dynamically:
</p>

<pre>\{{eui-input value=email error=emailValid}}</pre>

<pre>email: 'john@example',

emailValid: function() {
  var emailpat = /^[^@]+@[^@]+\.[^@\.]{2,}$/;
  var email = this.get('email');

  if (email.match(emailpat)) {
    return false;
  } else {
    return 'We need a valid email address';
  }
}.property('email')</pre>

<div class="output">
  {{eui-input value=email error=emailValid}}
</div>

<br />

<p>
  You can use a validation library such as <a href="https://github.com/dockyard/ember-validations">Ember Validations</a> in conjunction with <em>error</em> for succinct error handling.
</p>
