<h1>Theming</h1>

<div class="intro">
  Extend upon the existing aesthetic style or replace it completely with a custom theme.
</div>

<h2>Extending the default theme</h2>

<p>
  Every component has a style attribute. For concise css scoping, this value is prefixed with <em>eui-</em> and added as a class to the main container element of the component.
</p>
<p>
  For example, the button component has two supported style attributes: <em>default</em> and <em>primary</em>. If you specify the <em>primary</em> style then the final markup for the button, ignoring metamorph tags, would look something like this:
</p>

<pre>\{{eui-button label="Save Changes" style="primary"}}</pre>

<pre>&lt;button class="eui-button-medium-primary">
  &lt;div class="eui-component-wrapper">
    &lt;div class="eui-label">
      &lt;div class="eui-label-value">
        Save Changes
      &lt;/div>
    &lt;/div>
  &lt;/div>
&lt;/button></pre>

<p>However, you can specify any value you like and it will be rted into the class name. If you do not supply a style paramater then the default value will automatically be used.
</p>
<p>
  The same logic applies for the size paramater as well. By default <em>tiny</em>, <em>small</em>, <em>medium</em> (default value), and <em>large</em> are supported. However, if you wanted to add a <em>gigantic</em> size simply specify it:
</p>

<pre>\{{eui-button label="Save Changes" size="gigantic"}}</pre>

<pre>&lt;button class="eui-button-gigantic-default">
  &lt;div class="eui-component-wrapper">
    &lt;div class="eui-label">
      &lt;div class="eui-label-value">
        Save Changes
      &lt;/div>
    &lt;/div>
  &lt;/div>
&lt;/button></pre>

<p>
  Then add the relevant css classes to support the new size to your theme file.
</p>
<p>
  We have moved away from multi-class selectors due to speed concerns. While it may be a bit more code to create additional styles and sizes this way, it gives you greater control and makes theming less prone to css' cascading.
</p>


<h2>Creating a new theme</h2>

<p>
  To facilitate creating a completely different theme the css for EmberUI has been split into a base and theme file set. The base set is restricted to only the css necessary to support the feature set and provide an easy starting point for styling a new theme.
</p>
<p>
  The default theme set contains some very complex styles to support its visual aesthetic. If you plan to create a lot of custom styles you should import the raw scss for theme default theme and overwrite it as necessary.
</p>
